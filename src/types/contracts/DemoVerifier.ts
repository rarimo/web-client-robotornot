/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IDemoVerifier {
  export type IdentityProofInfoStruct = {
    senderAddr: string;
    isProved: boolean;
  };

  export type IdentityProofInfoStructOutput = [string, boolean] & {
    senderAddr: string;
    isProved: boolean;
  };
}

export interface DemoVerifierInterface extends utils.Interface {
  functions: {
    "__DemoVerifier_init(address)": FunctionFragment;
    "getIdentityProofInfo(uint256)": FunctionFragment;
    "isIdentityProved(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "proveIdentity(uint256[],uint256[2],uint256[2][2],uint256[2])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setZKPQueriesStorage(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "zkpQueriesStorage()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__DemoVerifier_init"
      | "getIdentityProofInfo"
      | "isIdentityProved"
      | "owner"
      | "proveIdentity"
      | "renounceOwnership"
      | "setZKPQueriesStorage"
      | "transferOwnership"
      | "zkpQueriesStorage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__DemoVerifier_init",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdentityProofInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isIdentityProved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proveIdentity",
    values: [
      BigNumberish[],
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setZKPQueriesStorage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "zkpQueriesStorage",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "__DemoVerifier_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdentityProofInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isIdentityProved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proveIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setZKPQueriesStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zkpQueriesStorage",
    data: BytesLike
  ): Result;

  events: {
    "IdentityProved(uint256,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IdentityProved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface IdentityProvedEventObject {
  identityId: BigNumber;
  senderAddr: string;
}
export type IdentityProvedEvent = TypedEvent<
  [BigNumber, string],
  IdentityProvedEventObject
>;

export type IdentityProvedEventFilter = TypedEventFilter<IdentityProvedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface DemoVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DemoVerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __DemoVerifier_init(
      zkpQueriesStorage_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getIdentityProofInfo(
      identityId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IDemoVerifier.IdentityProofInfoStructOutput]>;

    isIdentityProved(
      identityId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proveIdentity(
      inputs_: BigNumberish[],
      a_: [BigNumberish, BigNumberish],
      b_: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c_: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setZKPQueriesStorage(
      newZKPQueriesStorage_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    zkpQueriesStorage(overrides?: CallOverrides): Promise<[string]>;
  };

  __DemoVerifier_init(
    zkpQueriesStorage_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getIdentityProofInfo(
    identityId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IDemoVerifier.IdentityProofInfoStructOutput>;

  isIdentityProved(
    identityId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  proveIdentity(
    inputs_: BigNumberish[],
    a_: [BigNumberish, BigNumberish],
    b_: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    c_: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setZKPQueriesStorage(
    newZKPQueriesStorage_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  zkpQueriesStorage(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    __DemoVerifier_init(
      zkpQueriesStorage_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getIdentityProofInfo(
      identityId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IDemoVerifier.IdentityProofInfoStructOutput>;

    isIdentityProved(
      identityId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    proveIdentity(
      inputs_: BigNumberish[],
      a_: [BigNumberish, BigNumberish],
      b_: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c_: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setZKPQueriesStorage(
      newZKPQueriesStorage_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    zkpQueriesStorage(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "IdentityProved(uint256,address)"(
      identityId?: BigNumberish | null,
      senderAddr?: null
    ): IdentityProvedEventFilter;
    IdentityProved(
      identityId?: BigNumberish | null,
      senderAddr?: null
    ): IdentityProvedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    __DemoVerifier_init(
      zkpQueriesStorage_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getIdentityProofInfo(
      identityId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isIdentityProved(
      identityId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proveIdentity(
      inputs_: BigNumberish[],
      a_: [BigNumberish, BigNumberish],
      b_: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c_: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setZKPQueriesStorage(
      newZKPQueriesStorage_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    zkpQueriesStorage(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    __DemoVerifier_init(
      zkpQueriesStorage_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getIdentityProofInfo(
      identityId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isIdentityProved(
      identityId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proveIdentity(
      inputs_: BigNumberish[],
      a_: [BigNumberish, BigNumberish],
      b_: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c_: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setZKPQueriesStorage(
      newZKPQueriesStorage_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    zkpQueriesStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
