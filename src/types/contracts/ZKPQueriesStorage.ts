/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace ICircuitValidator {
  export type CircuitQueryStruct = {
    schema: BigNumberish;
    claimPathKey: BigNumberish;
    operator: BigNumberish;
    value: BigNumberish[];
    queryHash: BigNumberish;
    circuitId: string;
  };

  export type CircuitQueryStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber[],
    BigNumber,
    string
  ] & {
    schema: BigNumber;
    claimPathKey: BigNumber;
    operator: BigNumber;
    value: BigNumber[];
    queryHash: BigNumber;
    circuitId: string;
  };
}

export declare namespace IZKPQueriesStorage {
  export type QueryInfoStruct = {
    circuitQuery: ICircuitValidator.CircuitQueryStruct;
    queryValidator: string;
  };

  export type QueryInfoStructOutput = [
    ICircuitValidator.CircuitQueryStructOutput,
    string
  ] & {
    circuitQuery: ICircuitValidator.CircuitQueryStructOutput;
    queryValidator: string;
  };
}

export interface ZKPQueriesStorageInterface extends utils.Interface {
  functions: {
    "__ZKPQueriesStorage_init()": FunctionFragment;
    "getQueryHash((uint256,uint256,uint256,uint256[],uint256,string))": FunctionFragment;
    "getQueryHashRaw(uint256,uint256,uint256,uint256[])": FunctionFragment;
    "getQueryInfo(string)": FunctionFragment;
    "getQueryValidator(string)": FunctionFragment;
    "getStoredCircuitQuery(string)": FunctionFragment;
    "getStoredQueryHash(string)": FunctionFragment;
    "getStoredSchema(string)": FunctionFragment;
    "getSupportedQueryIDs()": FunctionFragment;
    "isQueryExists(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeZKPQuery(string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setZKPQuery(string,((uint256,uint256,uint256,uint256[],uint256,string),address))": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__ZKPQueriesStorage_init"
      | "getQueryHash"
      | "getQueryHashRaw"
      | "getQueryInfo"
      | "getQueryValidator"
      | "getStoredCircuitQuery"
      | "getStoredQueryHash"
      | "getStoredSchema"
      | "getSupportedQueryIDs"
      | "isQueryExists"
      | "owner"
      | "removeZKPQuery"
      | "renounceOwnership"
      | "setZKPQuery"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__ZKPQueriesStorage_init",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQueryHash",
    values: [ICircuitValidator.CircuitQueryStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getQueryHashRaw",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getQueryInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getQueryValidator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStoredCircuitQuery",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStoredQueryHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStoredSchema",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedQueryIDs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isQueryExists",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeZKPQuery",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setZKPQuery",
    values: [string, IZKPQueriesStorage.QueryInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "__ZKPQueriesStorage_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQueryHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQueryHashRaw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQueryInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQueryValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStoredCircuitQuery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStoredQueryHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStoredSchema",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedQueryIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isQueryExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeZKPQuery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setZKPQuery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ZKPQueryRemoved(string)": EventFragment;
    "ZKPQuerySet(string,address,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZKPQueryRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZKPQuerySet"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ZKPQueryRemovedEventObject {
  queryId: string;
}
export type ZKPQueryRemovedEvent = TypedEvent<
  [string],
  ZKPQueryRemovedEventObject
>;

export type ZKPQueryRemovedEventFilter = TypedEventFilter<ZKPQueryRemovedEvent>;

export interface ZKPQuerySetEventObject {
  queryId: string;
  queryValidator: string;
  newCircuitQuery: ICircuitValidator.CircuitQueryStructOutput;
}
export type ZKPQuerySetEvent = TypedEvent<
  [string, string, ICircuitValidator.CircuitQueryStructOutput],
  ZKPQuerySetEventObject
>;

export type ZKPQuerySetEventFilter = TypedEventFilter<ZKPQuerySetEvent>;

export interface ZKPQueriesStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZKPQueriesStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __ZKPQueriesStorage_init(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getQueryHash(
      circuitQuery_: ICircuitValidator.CircuitQueryStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getQueryHashRaw(
      schema_: BigNumberish,
      operator_: BigNumberish,
      claimPathKey_: BigNumberish,
      values_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getQueryInfo(
      queryId_: string,
      overrides?: CallOverrides
    ): Promise<[IZKPQueriesStorage.QueryInfoStructOutput]>;

    getQueryValidator(
      queryId_: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getStoredCircuitQuery(
      queryId_: string,
      overrides?: CallOverrides
    ): Promise<[ICircuitValidator.CircuitQueryStructOutput]>;

    getStoredQueryHash(
      queryId_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStoredSchema(
      queryId_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSupportedQueryIDs(overrides?: CallOverrides): Promise<[string[]]>;

    isQueryExists(
      queryId_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeZKPQuery(
      queryId_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setZKPQuery(
      queryId_: string,
      queryInfo_: IZKPQueriesStorage.QueryInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  __ZKPQueriesStorage_init(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getQueryHash(
    circuitQuery_: ICircuitValidator.CircuitQueryStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getQueryHashRaw(
    schema_: BigNumberish,
    operator_: BigNumberish,
    claimPathKey_: BigNumberish,
    values_: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getQueryInfo(
    queryId_: string,
    overrides?: CallOverrides
  ): Promise<IZKPQueriesStorage.QueryInfoStructOutput>;

  getQueryValidator(
    queryId_: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getStoredCircuitQuery(
    queryId_: string,
    overrides?: CallOverrides
  ): Promise<ICircuitValidator.CircuitQueryStructOutput>;

  getStoredQueryHash(
    queryId_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStoredSchema(
    queryId_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSupportedQueryIDs(overrides?: CallOverrides): Promise<string[]>;

  isQueryExists(queryId_: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeZKPQuery(
    queryId_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setZKPQuery(
    queryId_: string,
    queryInfo_: IZKPQueriesStorage.QueryInfoStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    __ZKPQueriesStorage_init(overrides?: CallOverrides): Promise<void>;

    getQueryHash(
      circuitQuery_: ICircuitValidator.CircuitQueryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQueryHashRaw(
      schema_: BigNumberish,
      operator_: BigNumberish,
      claimPathKey_: BigNumberish,
      values_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQueryInfo(
      queryId_: string,
      overrides?: CallOverrides
    ): Promise<IZKPQueriesStorage.QueryInfoStructOutput>;

    getQueryValidator(
      queryId_: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getStoredCircuitQuery(
      queryId_: string,
      overrides?: CallOverrides
    ): Promise<ICircuitValidator.CircuitQueryStructOutput>;

    getStoredQueryHash(
      queryId_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStoredSchema(
      queryId_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupportedQueryIDs(overrides?: CallOverrides): Promise<string[]>;

    isQueryExists(
      queryId_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeZKPQuery(queryId_: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setZKPQuery(
      queryId_: string,
      queryInfo_: IZKPQueriesStorage.QueryInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ZKPQueryRemoved(string)"(
      queryId?: string | null
    ): ZKPQueryRemovedEventFilter;
    ZKPQueryRemoved(queryId?: string | null): ZKPQueryRemovedEventFilter;

    "ZKPQuerySet(string,address,tuple)"(
      queryId?: string | null,
      queryValidator?: null,
      newCircuitQuery?: null
    ): ZKPQuerySetEventFilter;
    ZKPQuerySet(
      queryId?: string | null,
      queryValidator?: null,
      newCircuitQuery?: null
    ): ZKPQuerySetEventFilter;
  };

  estimateGas: {
    __ZKPQueriesStorage_init(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getQueryHash(
      circuitQuery_: ICircuitValidator.CircuitQueryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQueryHashRaw(
      schema_: BigNumberish,
      operator_: BigNumberish,
      claimPathKey_: BigNumberish,
      values_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQueryInfo(
      queryId_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQueryValidator(
      queryId_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStoredCircuitQuery(
      queryId_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStoredQueryHash(
      queryId_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStoredSchema(
      queryId_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupportedQueryIDs(overrides?: CallOverrides): Promise<BigNumber>;

    isQueryExists(
      queryId_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeZKPQuery(
      queryId_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setZKPQuery(
      queryId_: string,
      queryInfo_: IZKPQueriesStorage.QueryInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __ZKPQueriesStorage_init(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getQueryHash(
      circuitQuery_: ICircuitValidator.CircuitQueryStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQueryHashRaw(
      schema_: BigNumberish,
      operator_: BigNumberish,
      claimPathKey_: BigNumberish,
      values_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQueryInfo(
      queryId_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQueryValidator(
      queryId_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStoredCircuitQuery(
      queryId_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStoredQueryHash(
      queryId_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStoredSchema(
      queryId_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupportedQueryIDs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isQueryExists(
      queryId_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeZKPQuery(
      queryId_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setZKPQuery(
      queryId_: string,
      queryInfo_: IZKPQueriesStorage.QueryInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
